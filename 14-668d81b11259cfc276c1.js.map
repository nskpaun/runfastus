{"version":3,"sources":["webpack:///./node_modules/react-game-kit/lib/index.js","webpack:///./node_modules/matter-js/build/matter.js","webpack:///./node_modules/react-game-kit/lib/utils/audio-player.js","webpack:///./node_modules/react-game-kit/lib/components/body.js","webpack:///./node_modules/react-game-kit/lib/components/loop.js","webpack:///./node_modules/react-game-kit/lib/utils/game-loop.js","webpack:///./node_modules/react-game-kit/lib/utils/key-listener.js","webpack:///./node_modules/react-game-kit/lib/components/sprite.js","webpack:///./node_modules/react-game-kit/lib/components/stage.js","webpack:///./node_modules/react-game-kit/lib/components/tile-map.js","webpack:///./node_modules/react-game-kit/lib/components/world.js"],"names":["Object","defineProperty","exports","value","World","TileMap","Stage","Sprite","KeyListener","Loop","Body","AudioPlayer","undefined","_audioPlayer2","_interopRequireDefault","__webpack_require__","_body2","_loop2","_keyListener2","_sprite2","_stage2","_tileMap2","_world2","obj","__esModule","default","global","require","module","r","e","n","t","o","i","f","c","u","a","Error","code","p","call","length","1","_dereq_","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","create","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","fillStyle","strokeStyle","min","max","settings","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","../core/Common","../core/Sleeping","../geometry/Axes","../geometry/Bounds","../geometry/Vector","../geometry/Vertices","../render/Render","2","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","../core/Events","./Body","3","gravity","../constraint/Constraint","./Composite","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pairId","pair","isActive","collision","collides","collided","filterA","filterB","./Pair","./SAT","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","world","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","./Detector","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","./Contact","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","../factory/Bodies","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","prevIndex","nextIndex","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","../body/Composite","../collision/Detector","../core/Mouse","./Constraint","14","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","arguments","source","prop","constructor","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","prototype","isFunction","isPlainObject","isString","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","l","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","this","self","15","Engine","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","../body/Body","../body/World","../collision/Grid","../collision/Pairs","../collision/Resolver","./Common","./Events","./Metrics","./Sleeping","16","eventNames","callback","name","names","off","join","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","./Plugin","18","19","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","width","clientHeight","height","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","setTimeout","clearTimeout","runner","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","run","time","tick","stop","start","./Engine","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","./Bodies","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","30","RenderPixi","../collision/Contact","../collision/Pair","../collision/Query","../collision/SAT","../constraint/MouseConstraint","../core/Engine","../core/Matter","../core/Metrics","../core/Plugin","../core/Runner","../factory/Composites","../geometry/Svg","../render/RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","url","instance","TypeError","_classCallCheck","buffer","AudioContext","webkitAudioContext","loadBuffer","volume","createBufferSource","gainNode","createGain","gain","connect","destination","currentTime","bind","_this","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","error","onerror","send","_class","_react","_propTypes2","_matterJs","_matterJs2","_objectWithoutProperties","_Component","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","shape","arr","arr2","from","_toConsumableArray","subClass","superClass","setPrototypeOf","_inherits","Component","nextProps","_this2","forEach","option","propTypes","string","any","bool","defaultProps","contextTypes","childContextTypes","_extends","assign","_react2","_gameLoop2","styles","GameLoop","subscribers","loopID","LEFT","RIGHT","UP","DOWN","SPACE","down","up","isDown","subscribe","unsubscribe","keyCode","removeEventListener","tickCount","finished","state","currentStep","onPlayStateChanged","animate","setState","repeat","ticksPerFrame","steps","lastStep","nextStep","_props","tileWidth","tileHeight","transform","overflow","transformOrigin","imageRendering","getWrapperStyles","getImageStyles","_slicedToArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","sliceIterator","dimensions","setDimensions","getScale","_state$dimensions","vwidth","vheight","targetWidth","targetHeight","targetScale","ref","getInnerStyles","offsetWidth","offsetHeight","nextState","nextContext","layers","mappedLayers","layer","gridIndex","getImageWrapperStyles","renderTile","getTileData","tileSize","imageIndex","display","_this3","generateMap","getLayerStyles","tile","lastTime","onInit","onUpdate","onCollision","currTime"],"mappings":"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","file":"14-668d81b11259cfc276c1.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.World = exports.TileMap = exports.Stage = exports.Sprite = exports.KeyListener = exports.Loop = exports.Body = exports.AudioPlayer = undefined;\n\nvar _audioPlayer = require('./utils/audio-player.js');\n\nvar _audioPlayer2 = _interopRequireDefault(_audioPlayer);\n\nvar _body = require('./components/body.js');\n\nvar _body2 = _interopRequireDefault(_body);\n\nvar _loop = require('./components/loop.js');\n\nvar _loop2 = _interopRequireDefault(_loop);\n\nvar _keyListener = require('./utils/key-listener.js');\n\nvar _keyListener2 = _interopRequireDefault(_keyListener);\n\nvar _sprite = require('./components/sprite.js');\n\nvar _sprite2 = _interopRequireDefault(_sprite);\n\nvar _stage = require('./components/stage.js');\n\nvar _stage2 = _interopRequireDefault(_stage);\n\nvar _tileMap = require('./components/tile-map.js');\n\nvar _tileMap2 = _interopRequireDefault(_tileMap);\n\nvar _world = require('./components/world.js');\n\nvar _world2 = _interopRequireDefault(_world);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.AudioPlayer = _audioPlayer2.default;\nexports.Body = _body2.default;\nexports.Loop = _loop2.default;\nexports.KeyListener = _keyListener2.default;\nexports.Sprite = _sprite2.default;\nexports.Stage = _stage2.default;\nexports.TileMap = _tileMap2.default;\nexports.World = _world2.default;","/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable no-console */\nvar AudioPlayer = function () {\n  function AudioPlayer(url, callback) {\n    _classCallCheck(this, AudioPlayer);\n\n    this.url = url || null;\n    this.callback = callback || function () {};\n\n    this.buffer = null;\n\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    this.context = window.context || new AudioContext();\n\n    this.loadBuffer();\n  }\n\n  _createClass(AudioPlayer, [{\n    key: 'play',\n    value: function play(options) {\n      var volume = options && options.volume;\n      var offset = options && options.offset;\n      var loop = options && options.loop;\n\n      var source = this.context.createBufferSource();\n      var gainNode = this.context.createGain();\n      gainNode.gain.value = volume || 0.5;\n\n      gainNode.connect(this.context.destination);\n      source.connect(gainNode);\n\n      source.buffer = this.buffer;\n      source.start(offset ? this.context.currentTime + offset : 0);\n      source.loop = loop || false;\n      return source.stop.bind(source);\n    }\n  }, {\n    key: 'loadBuffer',\n    value: function loadBuffer() {\n      var _this = this;\n\n      var request = new XMLHttpRequest();\n      request.open('GET', this.url, true);\n      request.responseType = 'arraybuffer';\n\n      request.onload = function () {\n        _this.context.decodeAudioData(request.response, function (buffer) {\n          if (!buffer) {\n            console.error('error decoding file data: ' + _this.url);\n            return;\n          }\n          _this.buffer = buffer;\n          _this.callback();\n        }, function (error) {\n          console.error('decodeAudioData error', error);\n        });\n      };\n\n      request.onerror = function onError() {\n        console.error('BufferLoader: XHR error');\n      };\n\n      request.send();\n    }\n  }]);\n\n  return AudioPlayer;\n}();\n\nexports.default = AudioPlayer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _matterJs = require('matter-js');\n\nvar _matterJs2 = _interopRequireDefault(_matterJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Body = (_temp = _class = function (_Component) {\n  _inherits(Body, _Component);\n\n  function Body(props, context) {\n    _classCallCheck(this, Body);\n\n    var _this = _possibleConstructorReturn(this, (Body.__proto__ || Object.getPrototypeOf(Body)).call(this, props));\n\n    var args = props.args,\n        children = props.children,\n        shape = props.shape,\n        options = _objectWithoutProperties(props, ['args', 'children', 'shape']); // eslint-disable-line no-unused-vars\n\n    _this.body = _matterJs.Bodies[shape].apply(_matterJs.Bodies, _toConsumableArray(args).concat([options]));\n    _matterJs.World.addBody(context.engine.world, _this.body);\n    return _this;\n  }\n\n  _createClass(Body, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var args = nextProps.args,\n          children = nextProps.children,\n          shape = nextProps.shape,\n          options = _objectWithoutProperties(nextProps, ['args', 'children', 'shape']); // eslint-disable-line no-unused-vars\n\n      Object.keys(options).forEach(function (option) {\n        if (option in _this2.body && _this2.props[option] !== nextProps[option]) {\n          _matterJs2.default.Body.set(_this2.body, option, options[option]);\n        }\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      _matterJs.World.remove(this.context.engine.world, this.body);\n    }\n  }, {\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        body: this.body\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n\n  return Body;\n}(_react.Component), _class.propTypes = {\n  angle: _propTypes2.default.number,\n  area: _propTypes2.default.string,\n  args: _propTypes2.default.array,\n  axes: _propTypes2.default.shape({\n    x: _propTypes2.default.number,\n    y: _propTypes2.default.number\n  }),\n  bounds: _propTypes2.default.shape({\n    min: _propTypes2.default.shape({\n      x: _propTypes2.default.number,\n      y: _propTypes2.default.number\n    }),\n    max: _propTypes2.default.shape({\n      x: _propTypes2.default.number,\n      y: _propTypes2.default.number\n    })\n  }),\n  children: _propTypes2.default.any,\n  collisionFilter: _propTypes2.default.shape({\n    category: _propTypes2.default.number,\n    group: _propTypes2.default.number,\n    mask: _propTypes2.default.number\n  }),\n  density: _propTypes2.default.number,\n  force: _propTypes2.default.shape({\n    x: _propTypes2.default.number,\n    y: _propTypes2.default.number\n  }),\n  friction: _propTypes2.default.number,\n  frictionAir: _propTypes2.default.number,\n  frictionStatic: _propTypes2.default.number,\n  id: _propTypes2.default.number,\n  inertia: _propTypes2.default.number,\n  inverseInertia: _propTypes2.default.number,\n  inverseMass: _propTypes2.default.number,\n  isSensor: _propTypes2.default.bool,\n  isSleeping: _propTypes2.default.bool,\n  isStatic: _propTypes2.default.bool,\n  label: _propTypes2.default.string,\n  mass: _propTypes2.default.number,\n  position: _propTypes2.default.shape({\n    x: _propTypes2.default.number,\n    y: _propTypes2.default.number\n  }),\n  restitution: _propTypes2.default.number,\n  shape: _propTypes2.default.string,\n  sleepThreshold: _propTypes2.default.number,\n  slop: _propTypes2.default.number,\n  slope: _propTypes2.default.number,\n  timeScale: _propTypes2.default.number,\n  torque: _propTypes2.default.number,\n  vertices: _propTypes2.default.array\n}, _class.defaultProps = {\n  args: [0, 0, 100, 100],\n  restitution: 0,\n  friction: 1,\n  frictionStatic: 0,\n  shape: 'rectangle'\n}, _class.contextTypes = {\n  engine: _propTypes2.default.object\n}, _class.childContextTypes = {\n  body: _propTypes2.default.object\n}, _temp);\nexports.default = Body;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _gameLoop = require('../utils/game-loop');\n\nvar _gameLoop2 = _interopRequireDefault(_gameLoop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Loop = (_temp = _class = function (_Component) {\n  _inherits(Loop, _Component);\n\n  function Loop(props) {\n    _classCallCheck(this, Loop);\n\n    var _this = _possibleConstructorReturn(this, (Loop.__proto__ || Object.getPrototypeOf(Loop)).call(this, props));\n\n    _this.loop = new _gameLoop2.default();\n    return _this;\n  }\n\n  _createClass(Loop, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.loop.start();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.loop.stop();\n    }\n  }, {\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        loop: this.loop\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var defaultStyles = {\n        height: '100%',\n        width: '100%'\n      };\n      var styles = _extends({}, defaultStyles, this.props.style);\n      return _react2.default.createElement(\n        'div',\n        { style: styles },\n        this.props.children\n      );\n    }\n  }]);\n\n  return Loop;\n}(_react.Component), _class.propTypes = {\n  children: _propTypes2.default.any,\n  style: _propTypes2.default.object\n}, _class.childContextTypes = {\n  loop: _propTypes2.default.object\n}, _temp);\nexports.default = Loop;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar GameLoop = function () {\n  function GameLoop() {\n    _classCallCheck(this, GameLoop);\n\n    this.subscribers = [];\n    this.loopID = null;\n    this.loop = this.loop.bind(this);\n  }\n\n  _createClass(GameLoop, [{\n    key: \"loop\",\n    value: function loop() {\n      this.subscribers.forEach(function (callback) {\n        callback.call();\n      });\n\n      this.loopID = window.requestAnimationFrame(this.loop);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this.loopID) {\n        this.loop();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.loopID) {\n        window.cancelAnimationFrame(this.loopID);\n        this.loopID = null;\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      return this.subscribers.push(callback);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      this.subscribers.splice(id - 1, 1);\n    }\n  }]);\n\n  return GameLoop;\n}();\n\nexports.default = GameLoop;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar KeyListener = function () {\n  function KeyListener() {\n    _classCallCheck(this, KeyListener);\n\n    this.LEFT = 37;\n    this.RIGHT = 39;\n    this.UP = 38;\n    this.DOWN = 40;\n    this.SPACE = 32;\n\n    this.keys = {};\n\n    this.down = this.down.bind(this);\n    this.up = this.up.bind(this);\n    this.isDown = this.isDown.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.unsubscribe = this.unsubscribe.bind(this);\n  }\n\n  _createClass(KeyListener, [{\n    key: 'down',\n    value: function down(event) {\n      if (event.keyCode in this.keys) {\n        event.preventDefault();\n        this.keys[event.keyCode] = true;\n      }\n    }\n  }, {\n    key: 'up',\n    value: function up(event) {\n      if (event.keyCode in this.keys) {\n        event.preventDefault();\n        this.keys[event.keyCode] = false;\n      }\n    }\n  }, {\n    key: 'isDown',\n    value: function isDown(keyCode) {\n      return this.keys[keyCode] || false;\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(keys) {\n      var _this = this;\n\n      window.addEventListener('keydown', this.down);\n      window.addEventListener('keyup', this.up);\n\n      keys.forEach(function (key) {\n        _this.keys[key] = false;\n      });\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      window.removeEventListener('keydown', this.down);\n      window.removeEventListener('keyup', this.up);\n      this.keys = {};\n    }\n  }]);\n\n  return KeyListener;\n}();\n\nexports.default = KeyListener;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Sprite = (_temp = _class = function (_Component) {\n  _inherits(Sprite, _Component);\n\n  function Sprite(props) {\n    _classCallCheck(this, Sprite);\n\n    var _this = _possibleConstructorReturn(this, (Sprite.__proto__ || Object.getPrototypeOf(Sprite)).call(this, props));\n\n    _this.loopID = null;\n    _this.tickCount = 0;\n    _this.finished = false;\n\n    _this.state = {\n      currentStep: 0\n    };\n    return _this;\n  }\n\n  _createClass(Sprite, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.props.onPlayStateChanged(1);\n      var animate = this.animate.bind(this, this.props);\n      this.loopID = this.context.loop.subscribe(animate);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.state !== this.props.state) {\n        this.finished = false;\n        this.props.onPlayStateChanged(1);\n        this.context.loop.unsubscribe(this.loopID);\n        this.tickCount = 0;\n\n        this.setState({\n          currentStep: 0\n        }, function () {\n          var animate = _this2.animate.bind(_this2, nextProps);\n          _this2.loopID = _this2.context.loop.subscribe(animate);\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.context.loop.unsubscribe(this.loopID);\n    }\n  }, {\n    key: 'animate',\n    value: function animate(props) {\n      var repeat = props.repeat,\n          ticksPerFrame = props.ticksPerFrame,\n          state = props.state,\n          steps = props.steps;\n\n\n      if (this.tickCount === ticksPerFrame && !this.finished) {\n        if (steps[state] !== 0) {\n          var currentStep = this.state.currentStep;\n\n          var lastStep = steps[state];\n          var nextStep = currentStep === lastStep ? 0 : currentStep + 1;\n\n          this.setState({\n            currentStep: nextStep\n          });\n\n          if (currentStep === lastStep && repeat === false) {\n            this.finished = true;\n            this.props.onPlayStateChanged(0);\n          }\n        }\n\n        this.tickCount = 0;\n      } else {\n        this.tickCount++;\n      }\n    }\n  }, {\n    key: 'getImageStyles',\n    value: function getImageStyles() {\n      var currentStep = this.state.currentStep;\n      var _props = this.props,\n          state = _props.state,\n          tileWidth = _props.tileWidth,\n          tileHeight = _props.tileHeight;\n\n\n      var left = this.props.offset[0] + currentStep * tileWidth;\n      var top = this.props.offset[1] + state * tileHeight;\n\n      return {\n        position: 'absolute',\n        transform: 'translate(-' + left + 'px, -' + top + 'px)'\n      };\n    }\n  }, {\n    key: 'getWrapperStyles',\n    value: function getWrapperStyles() {\n      return {\n        height: this.props.tileHeight,\n        width: this.props.tileWidth,\n        overflow: 'hidden',\n        position: 'relative',\n        transform: 'scale(' + (this.props.scale || this.context.scale) + ')',\n        transformOrigin: 'top left',\n        imageRendering: 'pixelated'\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'div',\n        { style: _extends({}, this.getWrapperStyles(), this.props.style) },\n        _react2.default.createElement('img', {\n          style: this.getImageStyles(),\n          src: this.props.src\n        })\n      );\n    }\n  }]);\n\n  return Sprite;\n}(_react.Component), _class.propTypes = {\n  offset: _propTypes2.default.array,\n  onPlayStateChanged: _propTypes2.default.func,\n  repeat: _propTypes2.default.bool,\n  scale: _propTypes2.default.number,\n  src: _propTypes2.default.string,\n  state: _propTypes2.default.number,\n  steps: _propTypes2.default.array,\n  style: _propTypes2.default.object,\n  ticksPerFrame: _propTypes2.default.number,\n  tileHeight: _propTypes2.default.number,\n  tileWidth: _propTypes2.default.number\n}, _class.defaultProps = {\n  offset: [0, 0],\n  onPlayStateChanged: function onPlayStateChanged() {},\n  repeat: true,\n  src: '',\n  state: 0,\n  steps: [],\n  ticksPerFrame: 4,\n  tileHeight: 64,\n  tileWidth: 64\n}, _class.contextTypes = {\n  loop: _propTypes2.default.object,\n  scale: _propTypes2.default.number\n}, _temp);\nexports.default = Sprite;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Stage = (_temp = _class = function (_Component) {\n  _inherits(Stage, _Component);\n\n  function Stage(props) {\n    _classCallCheck(this, Stage);\n\n    var _this = _possibleConstructorReturn(this, (Stage.__proto__ || Object.getPrototypeOf(Stage)).call(this, props));\n\n    _this.container = null;\n\n    _this.state = {\n      dimensions: [0, 0]\n    };\n\n    _this.setDimensions = _this.setDimensions.bind(_this);\n    return _this;\n  }\n\n  _createClass(Stage, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('resize', this.setDimensions);\n      this.setDimensions();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.setDimensions);\n    }\n  }, {\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        scale: this.getScale().scale,\n        loop: this.context.loop\n      };\n    }\n  }, {\n    key: 'getScale',\n    value: function getScale() {\n      var _state$dimensions = _slicedToArray(this.state.dimensions, 2),\n          vwidth = _state$dimensions[0],\n          vheight = _state$dimensions[1];\n\n      var _props = this.props,\n          height = _props.height,\n          width = _props.width;\n\n\n      var targetWidth = void 0;\n      var targetHeight = void 0;\n      var targetScale = void 0;\n\n      if (height / width > vheight / vwidth) {\n        targetHeight = vheight;\n        targetWidth = targetHeight * width / height;\n        targetScale = vheight / height;\n      } else {\n        targetWidth = vwidth;\n        targetHeight = targetWidth * height / width;\n        targetScale = vwidth / width;\n      }\n\n      if (!this.container) {\n        return {\n          height: height,\n          width: width,\n          scale: 1\n        };\n      } else {\n        return {\n          height: targetHeight,\n          width: targetWidth,\n          scale: targetScale\n        };\n      }\n    }\n  }, {\n    key: 'getWrapperStyles',\n    value: function getWrapperStyles() {\n      return {\n        height: '100%',\n        width: '100%',\n        position: 'relative'\n      };\n    }\n  }, {\n    key: 'getInnerStyles',\n    value: function getInnerStyles() {\n      var scale = this.getScale();\n      var xOffset = Math.floor((this.state.dimensions[0] - scale.width) / 2);\n      var yOffset = Math.floor((this.state.dimensions[1] - scale.height) / 2);\n\n      return {\n        height: Math.floor(scale.height),\n        width: Math.floor(scale.width),\n        position: 'absolute',\n        overflow: 'hidden',\n        transform: 'translate(' + xOffset + 'px, ' + yOffset + 'px)'\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return _react2.default.createElement(\n        'div',\n        { style: this.getWrapperStyles(), ref: function ref(c) {\n            _this2.container = c;\n          } },\n        _react2.default.createElement(\n          'div',\n          { style: _extends({}, this.getInnerStyles(), this.props.style) },\n          this.props.children\n        )\n      );\n    }\n  }, {\n    key: 'setDimensions',\n    value: function setDimensions() {\n      this.setState({\n        dimensions: [this.container.offsetWidth, this.container.offsetHeight]\n      });\n    }\n  }]);\n\n  return Stage;\n}(_react.Component), _class.propTypes = {\n  children: _propTypes2.default.any,\n  height: _propTypes2.default.number,\n  style: _propTypes2.default.object,\n  width: _propTypes2.default.number\n}, _class.defaultProps = {\n  width: 1024,\n  height: 576\n}, _class.contextTypes = {\n  loop: _propTypes2.default.object\n}, _class.childContextTypes = {\n  loop: _propTypes2.default.object,\n  scale: _propTypes2.default.number\n}, _temp);\nexports.default = Stage;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TileMap = (_temp = _class = function (_Component) {\n  _inherits(TileMap, _Component);\n\n  function TileMap() {\n    _classCallCheck(this, TileMap);\n\n    return _possibleConstructorReturn(this, (TileMap.__proto__ || Object.getPrototypeOf(TileMap)).apply(this, arguments));\n  }\n\n  _createClass(TileMap, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      return this.context.scale !== nextContext.scale;\n    }\n  }, {\n    key: 'generateMap',\n    value: function generateMap() {\n      var _this2 = this;\n\n      var _props = this.props,\n          columns = _props.columns,\n          layers = _props.layers,\n          rows = _props.rows;\n\n\n      var mappedLayers = [];\n\n      layers.forEach(function (l, index) {\n        var layer = [];\n        for (var r = 0; r < rows; r++) {\n          for (var c = 0; c < columns; c++) {\n            var gridIndex = r * columns + c;\n            if (l[gridIndex] !== 0) {\n              layer.push(_react2.default.createElement(\n                'div',\n                {\n                  key: 'tile-' + index + '-' + r + '-' + c,\n                  style: _this2.getImageWrapperStyles(r, c)\n                },\n                _this2.props.renderTile(_this2.getTileData(r, c, l[gridIndex]), _this2.props.src, _this2.getImageStyles(l[gridIndex]))\n              ));\n            }\n          }\n        }\n        mappedLayers.push(layer);\n      });\n\n      return mappedLayers;\n    }\n  }, {\n    key: 'getTileData',\n    value: function getTileData(row, column, index) {\n      var tileSize = this.props.tileSize;\n\n\n      var size = tileSize;\n      var left = column * size;\n      var top = row * size;\n\n      return {\n        index: index,\n        size: tileSize,\n        left: left,\n        top: top\n      };\n    }\n  }, {\n    key: 'getImageStyles',\n    value: function getImageStyles(imageIndex) {\n      var scale = this.context.scale;\n      var tileSize = this.props.tileSize;\n\n\n      var size = Math.round(scale * tileSize);\n      var left = (imageIndex - 1) * size;\n\n      return {\n        position: 'absolute',\n        imageRendering: 'pixelated',\n        display: 'block',\n        height: '100%',\n        transform: 'translate(-' + left + 'px, 0px)'\n      };\n    }\n  }, {\n    key: 'getImageWrapperStyles',\n    value: function getImageWrapperStyles(row, column) {\n      var scale = this.context.scale;\n      var tileSize = this.props.tileSize;\n\n\n      var size = Math.round(scale * tileSize);\n      var left = column * size;\n      var top = row * size;\n\n      return {\n        height: size,\n        width: size,\n        overflow: 'hidden',\n        position: 'absolute',\n        transform: 'translate(' + left + 'px, ' + top + 'px)'\n      };\n    }\n  }, {\n    key: 'getLayerStyles',\n    value: function getLayerStyles() {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0\n      };\n    }\n  }, {\n    key: 'getWrapperStyles',\n    value: function getWrapperStyles() {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var layers = this.generateMap();\n      return _react2.default.createElement(\n        'div',\n        { style: _extends({}, this.getWrapperStyles(), this.props.style) },\n        layers.map(function (layer, index) {\n          return _react2.default.createElement(\n            'div',\n            { key: 'layer-' + index, style: _this3.getLayerStyles() },\n            layer\n          );\n        })\n      );\n    }\n  }]);\n\n  return TileMap;\n}(_react.Component), _class.propTypes = {\n  columns: _propTypes2.default.number,\n  layers: _propTypes2.default.array,\n  renderTile: _propTypes2.default.func,\n  rows: _propTypes2.default.number,\n  scale: _propTypes2.default.number,\n  src: _propTypes2.default.string,\n  style: _propTypes2.default.object,\n  tileSize: _propTypes2.default.number\n}, _class.defaultProps = {\n  columns: 16,\n  layers: [],\n  renderTile: function renderTile(tile, src, styles) {\n    return _react2.default.createElement('img', { style: styles, src: src });\n  },\n  rows: 9,\n  src: '',\n  tileSize: 64\n}, _class.contextTypes = {\n  scale: _propTypes2.default.number\n}, _temp);\nexports.default = TileMap;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _matterJs = require('matter-js');\n\nvar _matterJs2 = _interopRequireDefault(_matterJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar World = (_temp = _class = function (_Component) {\n  _inherits(World, _Component);\n\n  function World(props) {\n    _classCallCheck(this, World);\n\n    var _this = _possibleConstructorReturn(this, (World.__proto__ || Object.getPrototypeOf(World)).call(this, props));\n\n    _this.loopID = null;\n    _this.lastTime = null;\n\n    var world = _matterJs2.default.World.create({ gravity: props.gravity });\n\n    _this.engine = _matterJs.Engine.create({\n      world: world\n    });\n\n    _this.loop = _this.loop.bind(_this);\n    return _this;\n  }\n\n  _createClass(World, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var gravity = nextProps.gravity;\n\n\n      if (gravity !== this.props.gravity) {\n        this.engine.world.gravity = gravity;\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.loopID = this.context.loop.subscribe(this.loop);\n      this.props.onInit(this.engine);\n      _matterJs.Events.on(this.engine, 'afterUpdate', this.props.onUpdate);\n      _matterJs.Events.on(this.engine, 'collisionStart', this.props.onCollision);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.context.loop.unsubscribe(this.loopID);\n      _matterJs.Events.off(this.engine, 'afterUpdate', this.props.onUpdate);\n      _matterJs.Events.off(this.engine, 'collisionStart', this.props.onCollision);\n    }\n  }, {\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        engine: this.engine\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var defaultStyles = {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%'\n      };\n\n      return _react2.default.createElement(\n        'div',\n        { style: defaultStyles },\n        this.props.children\n      );\n    }\n  }, {\n    key: 'loop',\n    value: function loop() {\n      var currTime = 0.001 * Date.now();\n      _matterJs.Engine.update(this.engine, 1000 / 60, this.lastTime ? currTime / this.lastTime : 1);\n      this.lastTime = currTime;\n    }\n  }]);\n\n  return World;\n}(_react.Component), _class.propTypes = {\n  children: _propTypes2.default.any,\n  gravity: _propTypes2.default.shape({\n    x: _propTypes2.default.number,\n    y: _propTypes2.default.number,\n    scale: _propTypes2.default.number\n  }),\n  onCollision: _propTypes2.default.func,\n  onInit: _propTypes2.default.func,\n  onUpdate: _propTypes2.default.func\n}, _class.defaultProps = {\n  gravity: {\n    x: 0,\n    y: 1,\n    scale: 0.001\n  },\n  onCollision: function onCollision() {},\n  onInit: function onInit() {},\n  onUpdate: function onUpdate() {}\n}, _class.contextTypes = {\n  scale: _propTypes2.default.number,\n  loop: _propTypes2.default.object\n}, _class.childContextTypes = {\n  engine: _propTypes2.default.object\n}, _temp);\nexports.default = World;"],"sourceRoot":""}